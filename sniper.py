import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_KEY = '7985083424:AAGhStJNtT6ahJ7MF-Jsvoa-stlm3APje-o'  # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á
bot = Bot(token=API_KEY)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
user_balances = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
previous_balance_in_usd = 0
user_chat_ids = set()
increase_threshold = 1
decrease_threshold = -5
sharp_drop_threshold = -10  # –ü–æ—Ä–æ–≥ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id)
ADMIN_ID = 511301057  # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
class Form(StatesGroup):
    set_tokens = State()
    set_increase_threshold = State()
    set_decrease_threshold = State()
    set_sharp_drop_threshold = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

def update_keyboard(chat_id):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ç–∏–ø
    balance = user_balances.get(chat_id, 0)
    
    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ –∫–∞–∫ —Ü–µ–ª–æ–µ
    formatted_balance = f"{balance}" if isinstance(balance, int) else f"{balance:.0f}"
    
    keyboard.add(KeyboardButton(f"ü™ô –£–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã ({formatted_balance} FPI)"))
    keyboard.add(KeyboardButton(f"üìà –ü–æ—Ä–æ–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è: {increase_threshold} USD"))
    keyboard.add(KeyboardButton(f"üìâ –ü–æ—Ä–æ–≥ —É–º–µ–Ω—å—à–µ–Ω–∏—è: {abs(decrease_threshold)} USD"))
    keyboard.add(KeyboardButton(f"üö® –ü–æ—Ä–æ–≥ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è: {abs(sharp_drop_threshold)} USD"))
    
    return keyboard

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_chat_ids.add(message.chat.id)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    welcome_text = (f"–ë–æ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç –í–∞—Å –æ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n\n"
                    f"ü™ô *–í–∞—à –±–∞–ª–∞–Ω—Å (—Ç–æ–∫–µ–Ω—ã)*: `{user_balances.get(message.chat.id, 0):.0f}` *FPI*\n\n"
                    f"üìà *–ü–æ—Ä–æ–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è*: `{increase_threshold:.0f}` *USD*\n\n"
                    f"üìâ *–ü–æ—Ä–æ–≥ —É–º–µ–Ω—å—à–µ–Ω–∏—è*: `{abs(decrease_threshold):.0f}` *USD*\n\n"
                    f"üö® *–ü–æ—Ä–æ–≥ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è*: `{abs(sharp_drop_threshold):.0f}` *USD*\n\n"
                    f"‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ *10* —Å–µ–∫ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫—É—Ä—Å–∞\n\n_–±–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç BLUM, –∫—É—Ä—Å –±–µ—Ä–µ—Ç—Å—è —Å dexscreener_")
                    
    await message.answer(welcome_text, parse_mode='Markdown', reply_markup=update_keyboard(message.chat.id))


@dp.message_handler(lambda message: message.text.startswith("ü™ô –£–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã") or 
                                    message.text.startswith("üìà –ü–æ—Ä–æ–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è") or 
                                    message.text.startswith("üìâ –ü–æ—Ä–æ–≥ —É–º–µ–Ω—å—à–µ–Ω–∏—è") or 
                                    message.text.startswith("üö® –ü–æ—Ä–æ–≥ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è"))
async def process_buttons(message: types.Message):
    if message.text.startswith("ü™ô –£–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã"):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:")
        await Form.set_tokens.set()
    elif message.text.startswith("üìà –ü–æ—Ä–æ–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è"):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ USD:")
        await Form.set_increase_threshold.set()
    elif message.text.startswith("üìâ –ü–æ—Ä–æ–≥ —É–º–µ–Ω—å—à–µ–Ω–∏—è"):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ USD:")
        await Form.set_decrease_threshold.set()
    elif message.text.startswith("üö® –ü–æ—Ä–æ–≥ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è"):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ USD:")
        await Form.set_sharp_drop_threshold.set()

@dp.message_handler(text="ü™ô –£–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã")
async def process_set_tokens_button(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:")
    await Form.set_tokens.set()

@dp.message_handler(text="üìà –ü–æ—Ä–æ–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è")
async def process_set_increase_threshold_button(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ USD:")
    await Form.set_increase_threshold.set()

@dp.message_handler(text="üìâ –ü–æ—Ä–æ–≥ —É–º–µ–Ω—å—à–µ–Ω–∏—è")
async def process_set_decrease_threshold_button(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ USD:")
    await Form.set_decrease_threshold.set()

@dp.message_handler(text="üö® –ü–æ—Ä–æ–≥ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è")
async def process_set_sharp_drop_threshold_button(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ USD:")
    await Form.set_sharp_drop_threshold.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=Form.set_tokens)
async def process_set_tokens(message: types.Message, state: FSMContext):
    global user_balances
    try:
        user_balance = float(message.text)
        user_balances[message.chat.id] = user_balance  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å .0, –µ—Å–ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª–æ–µ
        formatted_balance = f"{user_balance:.0f}" if user_balance.is_integer() else str(user_balance)
        await message.answer(f"–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: `{formatted_balance}` FPI", parse_mode='Markdown', reply_markup=update_keyboard(message.chat.id))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    await state.finish()


@dp.message_handler(state=Form.set_increase_threshold)
async def process_set_increase_threshold(message: types.Message, state: FSMContext):
    global increase_threshold
    try:
        increase_threshold = float(message.text)
        await message.answer(f"–ü–æ—Ä–æ–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: `{increase_threshold}` USD", parse_mode='Markdown', reply_markup=update_keyboard(message.chat.id))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    await state.finish()

@dp.message_handler(state=Form.set_decrease_threshold)
async def process_set_decrease_threshold(message: types.Message, state: FSMContext):
    global decrease_threshold
    try:
        decrease_threshold = -abs(float(message.text))
        await message.answer(f"–ü–æ—Ä–æ–≥ —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: `{abs(decrease_threshold)}` USD", parse_mode='Markdown', reply_markup=update_keyboard(message.chat.id))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è
@dp.message_handler(state=Form.set_sharp_drop_threshold)
async def process_set_sharp_drop_threshold(message: types.Message, state: FSMContext):
    global sharp_drop_threshold
    try:
        sharp_drop_threshold = -abs(float(message.text))  # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
        await message.answer(f"–ü–æ—Ä–æ–≥ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: `{abs(sharp_drop_threshold)}` USD", parse_mode='Markdown', reply_markup=update_keyboard(message.chat.id))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    await state.finish()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞
async def get_token_price():
    url = "https://api.dexscreener.com/latest/dex/pairs/ton/eqayrrajgsuyhrggo1himnbgv9tvlndz3uoclaoytw_fgegd"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        price = float(data['pair']['priceUsd'])
        print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}")
        return price
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async def send_telegram_message(chat_id, message):
    try:
        await bot.send_message(chat_id, message)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
async def track_price():
    global previous_balance_in_usd, user_balances, increase_threshold, decrease_threshold, sharp_drop_threshold, current_price
    while True:
        try:
            current_price = await get_token_price()
            if current_price is None:
                continue

            for chat_id, user_balance in user_balances.items():
                current_balance_in_usd = user_balance * current_price
                message = f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ USD: {current_balance_in_usd:.2f}"

                if previous_balance_in_usd != 0:
                    change = current_balance_in_usd - previous_balance_in_usd
                    if change >= increase_threshold:
                        notification_message = (f"üü¢ –í–∞—à –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ {change:.2f} USD!\n\n"
                                                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance_in_usd:.2f} USD")
                        await send_telegram_message(chat_id, notification_message)

                    elif change <= decrease_threshold:
                        notification_message = (f"üî¥ –í–∞—à –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ {abs(change):.2f} USD!\n\n"
                                                f"üí∞–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance_in_usd:.2f} USD")
                        await send_telegram_message(chat_id, notification_message)

                    if change <= sharp_drop_threshold:
                        notification_message = (f"üö® –í–ù–ò–ú–ê–ù–ò–ï! –†–ï–ó–ö–û–ï –ü–ê–î–ï–ù–ò–ï üö®\n\n"
                                                f"üÜò –†–µ–∑–∫–æ —É–ø–∞–ª –Ω–∞ {abs(change):.2f} USD!\n\n"
                                                f"üí∞–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance_in_usd:.2f} USD")
                        await send_telegram_message(chat_id, notification_message)

                previous_balance_in_usd = current_balance_in_usd
                print(message)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(10)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
@dp.message_handler(commands=['list'])
async def list_users(message: types.Message):
    if message.chat.id == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_balances:
            response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤:\n"
            for chat_id, balance in user_balances.items():
                response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}: {balance} FPI\n"
            await message.answer(response)
        else:
            await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(track_price())
    executor.start_polling(dp)